name: forecast-iac

permissions:
  id-token: write 
  contents: read  

on:
  
  push:
    branches: 
      - 'develop'
      - 'qa'
  
  workflow_dispatch:

jobs:
  
  setup-stage:
    outputs:
      env-name: ${{ steps.env-name.outputs.env }}
    runs-on: ubuntu-latest
    steps:
    
    - name: Extract branch name
      id: env-name
      run: echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
  
  deploy_infraestructure:
    
    needs: [setup-stage]
    name: deploy infraestructure
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup-stage.outputs.env-name }}
    steps:
 
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: dorny/paths-filter@v2
      name: filter-files
      id: filter
      with:
        #base: ${{ github.ref }}
        filters: |
          awsbackup:
            - 'cfns/awsbackup.yaml'
          s3buckets:
            - 'cfns/s3buckets.yaml'
          sns-alarms:
            - added|modified: 'cfns/sns-alarms.yaml'
          vpcflowlogs:
            - 'cfns/vpcflowlogs.yaml'
          develop-parameters:
            - 'develop-parameters.json'
            
    
    - name: aws-cli-installation
      id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1.0.3
      with:
        version: 2    
        verbose: false 
        arch: amd64    
        rootdir: ""    
        workdir: ""    
    - run: aws --version 
         
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: samplerolesession
        aws-region: us-east-1

    # - name: Deploy Infraestructure - project-template
    #   run: |
    #    aws cloudformation deploy \
    #     --stack-name project-template \
    #     --template-file cfns/project-template.yaml --capabilities CAPABILITY_NAMED_IAM
    
    #- name: Upload Data Prueba CFN Template
    #  env:
    #    Environment: ${{secrets.Environment}}
    #    AWSAccountID: ${{secrets.AWSAccountID}}
    #  run: |
    #   aws s3 cp cfns/pruebas3.yaml s3://cloudhesive-$AWSAccountID-projecttemplate-prueba/prueba.yaml
    
    - name: Deploy Infraestructure - Prueba
      env: 
        Environment: ${{secrets.Environment}}
        AWSAccountID: ${{secrets.AWSAccountID}}    
      run: |
       cfnstack=$(aws cloudformation update-stack --stack-name prueba-coca --template-url https://cloudhesive-$AWSAccountID-projecttemplate-prueba.s3.amazonaws.com/prueba.yaml || aws cloudformation create-stack --stack-name prueba-coca --template-url https://cloudhesive-$AWSAccountID-projecttemplate-prueba.s3.amazonaws.com/prueba.yaml)
       python -m pip install boto3
       python3 scripts/deploy.py prueba-coca

    # - name: Python test
    #   run: |
    #    python -m pip install boto3
    #    python3 scripts/deploy.py
       
    # - name: Deploy Infraestructure - VPC Flow logs
    #   if: steps.filter.outputs.vpcflowlogs == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
    #    echo $dst_branch
    #    aws cloudformation deploy \
    #     --stack-name vpcflowlogs \
    #     --template-file cfns/vpcflowlogs.yaml --parameter-overrides file://$dst_branch-parameters.json --capabilities CAPABILITY_NAMED_IAM


    # - name: Deploy Infraestructure - S3 Buckets
    #   if: steps.filter.outputs.s3buckets == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
       
    #    aws cloudformation deploy \
    #     --stack-name S3BucketsForecastdataprocessed \
    #     --template-file cfns/s3buckets.yaml --parameter-overrides file://$dst_branch-parameters.json --capabilities CAPABILITY_NAMED_IAM


    # - name: Deploy Infraestructure - SNS Topic 
    #   if: steps.filter.outputs.sns-alarms == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
  
    #    aws cloudformation deploy \
    #     --stack-name SNSTopic-Alarm \
    #     --template-file cfns/sns-alarms.yaml --parameter-overrides file://$dst_branch-parameters.json

    # - name: Deploy Infraestructure - AWS Backup
      
    #   if: steps.filter.outputs.awsbackup == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}

    #    aws cloudformation deploy \
    #     --stack-name AWSBackup \
    #     --template-file cfns/awsbackup.yaml --capabilities CAPABILITY_IAM --parameter-overrides file://$dst_branch-parameters.json
