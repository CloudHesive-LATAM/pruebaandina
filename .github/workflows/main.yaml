name: forecast-iac

permissions:
  id-token: write 
  contents: read  
  
env:
  AWS_REGION: "us-east-1"

on:
  
  push:
    branches: 
      - 'develop'
      - 'qa'
      - 'prod'
  
  workflow_dispatch:

jobs:
  
  setup-stage:
    outputs:
      env-name: ${{ steps.env-name.outputs.env }}
    runs-on: ubuntu-latest
    steps:
    
    - name: Extract branch name
      id: env-name
      run: echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
  
  deploy_infraestructure:
    
    needs: [setup-stage]
    name: deploy infraestructure
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup-stage.outputs.env-name }}
    steps:
 
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: aws-cli-installation
      id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1.0.3
      with:
        version: 2    
        verbose: false 
        arch: amd64    
        rootdir: ""    
        workdir: ""    
    - run: aws --version 
         
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - uses: dorny/paths-filter@v2
      name: Apply paths-filters
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          infrastructure:
            - 'cfns/template.yaml'
    
    - name: Upload Infrastructure CFN template
      if: steps.filter.outputs.infrastructure == 'true'
      run: |
       aws s3 cp cfns/template.yaml s3://cfnprueba/template.txt
    
    - name: Deploy Infraestructure - Prueba
      if: steps.filter.outputs.infrastructure == 'true'
      env: 
        Environment: ${{secrets.Environment}}
        AWSAccountID: ${{secrets.AWSAccountID}}
        InstanceType: ${{secrets.InstanceType}}
        Monitoring: ${{secrets.Monitoring}}    
      run: |  
       chmod +x ./ghactions-scripts/deploy.sh
       PARAMETERS="{\"InstanceType\": \"$InstanceType\", \"Monitoring\": \"$Monitoring\"}"
       ./ghactions-scripts/deploy.sh prueba-coca https://cfnprueba.s3.amazonaws.com/template.txt "$PARAMETERS"

      #  if ! update_output=$(aws cloudformation update-stack --stack-name "$stack_name" --template-url "$template_url" --parameters ParameterKey=InstanceType,ParameterValue=$InstanceType 2>&1); then
      #     if [[ $update_output == *"No updates are to be performed."* ]]; then
      #       echo "No updates needed for the stack."
      #     elif [[ $update_output == *"An error occurred (ValidationError) when calling the UpdateStack operation: Stack ["$stack_name"] does not exist"* ]]; then
      #       aws cloudformation create-stack --stack-name "$stack_name" --template-url "$template_url" --parameters ParameterKey=InstanceType,ParameterValue=$InstanceType
      #       aws cloudformation wait stack-create-complete --stack-name "$stack_name"
      #     else
      #       echo "Update failed: $update_output"
      #       exit 1
      #     fi
      #  else
      #     echo "Stack update was executed. Update in progress..."
      #     aws cloudformation wait stack-update-complete --stack-name "$stack_name"
      #  fi

      #  stack_status=$(aws cloudformation describe-stacks --stack-name "$stack_name" --query "Stacks[0].StackStatus" --output text)
       
      #  if [[ $stack_status != "CREATE_COMPLETE" && $stack_status != "UPDATE_COMPLETE" ]]; then
      #     echo "Current status: $stack_status"
      #     exit 1
      #  else
      #     echo "Current status: $stack_status."
      #  fi


    # - name: Deploy Infraestructure - project-template
    #   run: |
    #    aws cloudformation deploy \
    #     --stack-name project-template \
    #     --template-file cfns/project-template.yaml --capabilities CAPABILITY_NAMED_IAM
    
    #- name: Upload Data Prueba CFN Template
    #  env:
    #    Environment: ${{secrets.Environment}}
    #    AWSAccountID: ${{secrets.AWSAccountID}}
    #  run: |
    #   aws s3 cp cfns/pruebas3.yaml s3://cloudhesive-$AWSAccountID-projecttemplate-prueba/prueba.yaml

    # - name: Python test
    #   run: |
    #    python -m pip install boto3
    #    python3 scripts/deploy.py
       
    # - name: Deploy Infraestructure - VPC Flow logs
    #   if: steps.filter.outputs.vpcflowlogs == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
    #    echo $dst_branch
    #    aws cloudformation deploy \
    #     --stack-name vpcflowlogs \
    #     --template-file cfns/vpcflowlogs.yaml --parameter-overrides file://$dst_branch-parameters.json --capabilities CAPABILITY_NAMED_IAM


    # - name: Deploy Infraestructure - S3 Buckets
    #   if: steps.filter.outputs.s3buckets == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
       
    #    aws cloudformation deploy \
    #     --stack-name S3BucketsForecastdataprocessed \
    #     --template-file cfns/s3buckets.yaml --parameter-overrides file://$dst_branch-parameters.json --capabilities CAPABILITY_NAMED_IAM


    # - name: Deploy Infraestructure - SNS Topic 
    #   if: steps.filter.outputs.sns-alarms == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}
  
    #    aws cloudformation deploy \
    #     --stack-name SNSTopic-Alarm \
    #     --template-file cfns/sns-alarms.yaml --parameter-overrides file://$dst_branch-parameters.json

    # - name: Deploy Infraestructure - AWS Backup
      
    #   if: steps.filter.outputs.awsbackup == 'true'
    #   run: |
    #    dst_branch=${GITHUB_REF_NAME}

    #    aws cloudformation deploy \
    #     --stack-name AWSBackup \
    ##     --template-file cfns/awsbackup.yaml --capabilities CAPABILITY_IAM --parameter-overrides file://$dst_branch-parameters.json
